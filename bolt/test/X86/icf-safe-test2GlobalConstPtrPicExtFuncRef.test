## Check that BOLT handles correctly folding functions with --icf=safe that can be referenced.
## This checks global const function pointer with external function reference in -fpic mode is handled correctly.

# REQUIRES: system-linux
# RUN: llvm-mc -filetype=obj -triple x86_64-unknown-linux %s -o %t1.o
# RUN: %clang %cflags %t1.o -o %t.exe -Wl,-q
# RUN: llvm-bolt --no-threads %t.exe --icf -debug -debug-only=bolt-icf -o %t.bolt 2>&1 | FileCheck --check-prefix=ICFCHECK %s
# RUN: llvm-bolt --no-threads %t.exe --icf=safe -debug -debug-only=bolt-icf -o %t.bolt 2>&1 | FileCheck --check-prefix=SAFEICFCHECK %s

# ICFCHECK:      ICF iteration 1
# ICFCHECK-NEXT: folding barAddFunc into fooAddFunc
# ICFCHECK-NEXT: folding _Z12barAddHdlperii into fooAddFunc
# ICFCHECK-NEXT: folding barMulFunc into fooMulFunc
# ICFCHECK-NEXT: folding barSubFunc into fooSubFunc

# SAFEICFCHECK:      skipping function fooMulFunc
# SAFEICFCHECK-NEXT: skipping function barAddFunc
# SAFEICFCHECK-NEXT: skipping function _Z12barAddHdlperii
# SAFEICFCHECK-NEXT: skipping function fooGlobalFuncHelperFunc
# SAFEICFCHECK-NEXT: ICF iteration 1
# SAFEICFCHECK-NEXT: folding barSubFunc into fooSubFunc
# SAFEICFCHECK-NEXT: ===---------


## clang++ main.cpp -c -o
## #define MY_CONST const
## extern int FooVar;
## extern int BarVar;
## [[clang::noinline]]
## MY_CONST int fooSub(int a, int b) {
##   return a - b;
## }
## [[clang::noinline]]
## MY_CONST int barSub(int a, int b) {
##   return a - b;
## }
## [[clang::noinline]]
## MY_CONST int fooMul(int a, int b) {
##   return a * b;
## }
## [[clang::noinline]]
## MY_CONST int barMul(int a, int b) {
##   return a * b;
## }
## [[clang::noinline]]
## MY_CONST int fooAdd(int a, int b) {
##   return a + b;
## }
## [[clang::noinline]]
## MY_CONST int barAdd(int a, int b) {
##   return a + b;
## }
## [[clang::noinline]]
## MY_CONST int helper1(MY_CONST int (*func)(int, int), int a, int b) {
##   if (func == barAdd)
##     return 1;
##   return func(a, b) - 4;
## }
## [[clang::noinline]]
## MY_CONST int helper2(MY_CONST int (*func)(int, int), MY_CONST int (*func2)(int, int), int a, int b) {
##   if (func == func2)
##     return 2;
##   return func(a, b) + func2(a, b);
## }
## extern MY_CONST int barAddHdlper(int a, int b);
## extern MY_CONST int fooGlobalFuncHelper(int a, int b);
## MY_CONST static int (*const funcGlobalBarAdd)(int, int) = barAddHdlper;
## MY_CONST int (* const funcGlobalBarMul)(int, int) = fooGlobalFuncHelper;
## int main(int argc, char **argv) {
##   int temp = helper1(funcGlobalBarAdd, FooVar, BarVar) +
##              helper2(fooMul, funcGlobalBarMul, FooVar, BarVar) + fooSub(FooVar, BarVar) +
##              barSub(FooVar, BarVar) + fooAdd(FooVar, BarVar);
##   MY_PRINTF("val: %d", temp);
##   return temp;
## }
## clang++ helper.cpp -c -o
## #define MY_CONST const
## int FooVar = 1;
## int BarVar = 2;
## [[clang::noinline]]
## MY_CONST int barAddHdlper(int a, int b) {
##   return a + b;
## }
##
## MY_CONST int (*const funcGlobalBarMulExt)(int, int) = barAddHdlper;
## MY_CONST int fooGlobalFuncHelper(int a, int b) {
##   return 5 + funcGlobalBarMulExt(a, b);
## }
## clang++ helper.cpp -c -o
## #define MY_CONST const
## int FooVar = 1;
## int BarVar = 2;
## [[clang::noinline]]
## MY_CONST int barAddHdlper(int a, int b) {
##   return a + b;
## }
##
## MY_CONST int (*const funcGlobalBarMulExt)(int, int) = barAddHdlper;
## MY_CONST int fooGlobalFuncHelper(int a, int b) {
##   return 5 + funcGlobalBarMulExt(a, b);
## }
	.globl	fooSubFunc
	.type	fooSubFunc,@function
fooSubFunc:
	.cfi_startproc
	subl	-8(%rbp), %eax
	retq
	.size	fooSubFunc, .-fooSubFunc
	.cfi_endproc

	.globl	barSubFunc
	.type	barSubFunc,@function
barSubFunc:
	.cfi_startproc
	subl	-8(%rbp), %eax
	retq
.Lfunc_end1:
	.size	barSubFunc, .-barSubFunc
	.cfi_endproc

	.globl	fooMulFunc
	.type	fooMulFunc,@function
fooMulFunc:
	.cfi_startproc
	imull	-8(%rbp), %eax
	retq
	.size	fooMulFunc, .-fooMulFunc
	.cfi_endproc

	.globl	barMulFunc
	.type	barMulFunc,@function
barMulFunc:
	.cfi_startproc
	imull	-8(%rbp), %eax
	retq
	.size	barMulFunc, .-barMulFunc
	.cfi_endproc

	.globl	fooAddFunc
	.type	fooAddFunc,@function
fooAddFunc:
	.cfi_startproc
	addl	-8(%rbp), %eax
	retq
	.size	fooAddFunc, .-fooAddFunc
	.cfi_endproc

	.globl	barAddFunc
	.type	barAddFunc,@function
barAddFunc:
	.cfi_startproc
	addl	-8(%rbp), %eax
	retq
	.size	barAddFunc, .-barAddFunc
	.cfi_endproc

	.globl	_Z7helper1PFKiiiEii
	.type	_Z7helper1PFKiiiEii,@function
_Z7helper1PFKiiiEii:
	.cfi_startproc
	leaq	barAddFunc(%rip), %rax
	cmpq	%rax, -16(%rbp)
	retq
	.size	_Z7helper1PFKiiiEii, .-_Z7helper1PFKiiiEii
	.cfi_endproc

	.globl	_Z7helper2PFKiiiES1_ii
	.type	_Z7helper2PFKiiiES1_ii,@function
_Z7helper2PFKiiiES1_ii:
	.cfi_startproc
  # Operates on registers.
	retq
	.size	_Z7helper2PFKiiiES1_ii, .-_Z7helper2PFKiiiES1_ii
	.cfi_endproc

	.globl	main
	.type	main,@function
main:
	.cfi_startproc
	movq	FooVar@GOTPCREL(%rip), %rax
	movq	BarVar@GOTPCREL(%rip), %rax
	movq	_Z12barAddHdlperii@GOTPCREL(%rip), %rdi
	callq	_Z7helper1PFKiiiEii
	leaq	fooMulFunc(%rip), %rdi
	movq	fooGlobalFuncHelperFunc@GOTPCREL(%rip), %rsi
	callq	_Z7helper2PFKiiiES1_ii
	callq	fooSubFunc
	callq	barSubFunc
	callq	fooAddFunc
	retq
	.size	main, .-main
	.cfi_endproc

	.globl	_Z12barAddHdlperii
	.type	_Z12barAddHdlperii,@function
_Z12barAddHdlperii:
	.cfi_startproc
	addl	-8(%rbp), %eax
	retq
	.size	_Z12barAddHdlperii, .-_Z12barAddHdlperii
	.cfi_endproc

	.globl	fooGlobalFuncHelperFunc
	.type	fooGlobalFuncHelperFunc,@function
fooGlobalFuncHelperFunc:
	.cfi_startproc
	callq	_Z12barAddHdlperii
	retq
	.size	fooGlobalFuncHelperFunc, .-fooGlobalFuncHelperFunc
	.cfi_endproc

	.type	FooVar,@object
	.data
	.globl	FooVar
FooVar:
	.long	1
	.size	FooVar, 4

	.type	BarVar,@object
	.globl	BarVar
BarVar:
	.long	2
	.size	BarVar, 4

	.type	.L.str,@object
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"val: %d\n"
	.size	.L.str, 9
