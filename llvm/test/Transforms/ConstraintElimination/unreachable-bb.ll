; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -p constraint-elimination -S %s | FileCheck %s

define void @f(i32 noundef %v0, i32 noundef %v1, i32 noundef %v2) {
; CHECK-LABEL: define void @f(
; CHECK-SAME: i32 noundef [[V0:%.*]], i32 noundef [[V1:%.*]], i32 noundef [[V2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CMP0:%.*]] = icmp sge i32 [[V0]], [[V1]]
; CHECK-NEXT:    [[CMP1:%.*]] = icmp sge i32 [[V1]], [[V2]]
; CHECK-NEXT:    [[AND1:%.*]] = and i1 [[CMP0]], [[CMP1]]
; CHECK-NEXT:    [[CMP2:%.*]] = icmp slt i32 [[V0]], [[V2]]
; CHECK-NEXT:    [[AND2:%.*]] = and i1 [[CMP2]], [[AND1]]
; CHECK-NEXT:    br i1 false, label %[[IF_THEN:.*]], label %[[RETURN:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    call void @side_effect()
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[RETURN]]:
; CHECK-NEXT:    ret void
;
entry:
  %cmp0 = icmp sge i32 %v0, %v1
  %cmp1 = icmp sge i32 %v1, %v2
  %and1 = and i1 %cmp0, %cmp1
  %cmp2 = icmp slt i32 %v0, %v2
  %and2 = and i1 %cmp2, %and1
  br i1 %and2, label %if.then, label %return

if.then:
  call void @side_effect()
  br label %return

return:
  ret void
}

declare void @side_effect()
