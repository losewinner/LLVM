; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=loop-vectorize -vectorize-num-stores-pred=2 -prefer-predicate-over-epilogue=predicate-dont-vectorize -S | FileCheck %s

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"

; Vectorization with dependence checks.

; Check that a non-power-of-2 MaxVF, calculated based on maximum safe distance,
; does not lead fold-tail to think that no tail will be generated for any chosen
; (power of 2) VF.
; Dependence distance here is 3 iterations.
; Tiny trip count of 15 divides 3, but any (even) VF will have a tail.

;unsigned char a [15+3];
;void maxvf3(){
;  for (int j = 0; j < 15; ++j) {
;    a[j] = 69;
;    a[j+3] = 7;
;  }
;}

@a = common local_unnamed_addr global [18 x i8] zeroinitializer, align 16

define void @maxvf3() {
; CHECK-LABEL: @maxvf3(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[J:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[J_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[AJ:%.*]] = getelementptr inbounds [18 x i8], ptr @a, i32 0, i32 [[J]]
; CHECK-NEXT:    store i8 69, ptr [[AJ]], align 8
; CHECK-NEXT:    [[JP3:%.*]] = add nuw nsw i32 3, [[J]]
; CHECK-NEXT:    [[AJP3:%.*]] = getelementptr inbounds [18 x i8], ptr @a, i32 0, i32 [[JP3]]
; CHECK-NEXT:    store i8 7, ptr [[AJP3]], align 8
; CHECK-NEXT:    [[J_NEXT]] = add nuw nsw i32 [[J]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[J_NEXT]], 15
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.body:
  %j = phi i32 [ 0, %entry ], [ %j.next, %for.body ]
  %aj = getelementptr inbounds [18 x i8], ptr @a, i32 0, i32 %j
  store i8 69, ptr %aj, align 8
  %jp3 = add nuw nsw i32 3, %j
  %ajp3 = getelementptr inbounds [18 x i8], ptr @a, i32 0, i32 %jp3
  store i8 7, ptr %ajp3, align 8
  %j.next = add nuw nsw i32 %j, 1
  %exitcond = icmp eq i32 %j.next, 15
  br i1 %exitcond, label %for.end, label %for.body, !llvm.loop !0

for.end:
  ret void
}

!0 = distinct !{!0, !1}
!1 = !{!"llvm.loop.vectorize.enable", i1 true}
