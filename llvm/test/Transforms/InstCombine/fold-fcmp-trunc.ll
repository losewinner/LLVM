; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine -S < %s | FileCheck %s


define i1 @fcmp_trunc(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp oge double [[TMP0]], 0x4058FFFFF0000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_ult(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_ult(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ult double [[TMP0]], 0x4068FFFFF0000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ult float %trunc, 2.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_ole(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_ole(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ole double [[TMP0]], 0x4072C00010000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ole float %trunc, 3.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_ogt(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_ogt(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ogt double [[TMP0]], 0x4079000010000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ogt float %trunc, 4.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_zero(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_zero(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp oge double [[TMP0]], 0xB690000000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp oge float %trunc, 0.000000
  ret i1 %result
}

define i1 @fcmp_trunc_with_nnan(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_nnan(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp nnan oge double [[TMP0]], 0x4058FFFFF0000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp nnan oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_ninf(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_ninf(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ninf oge double [[TMP0]], 0x4058FFFFF0000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ninf oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_nsz(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_nsz(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp nsz oge double [[TMP0]], 0x4058FFFFF0000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp nsz oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_reassoc(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_reassoc(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp reassoc oge double [[TMP0]], 0x4058FFFFF0000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp reassoc oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_fast(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_fast(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge double [[TMP0]], 0x4058FFFFF0000000 
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

define <4 x i1> @fcmp_vec_trunc(<4 x double> %0) {
; CHECK-LABEL: define <4 x i1> @fcmp_vec_trunc(
; CHECK-SAME: <4 x double> [[TMP0:%.*]]) {
; CHECK-NEXT:    [[CMP:%.*]] = fcmp olt <4 x double> [[TMP0]], <double 0x3FEFFFFFF0000000, double 0x3FEFFFFFF0000000, double 0x3FEFFFFFF0000000, double 0x3FEFFFFFF0000000>
; CHECK-NEXT:    ret <4 x i1> [[CMP]]
;
  %vec = fptrunc <4 x double> %0 to <4 x float>
  %cmp = fcmp olt <4 x float> %vec, <float 1.0, float 1.0, float 1.0, float 1.0>
  ret <4 x i1> %cmp
}

define <1 x i1> @fcmp_vec_trunc_scalar(<1 x double> %0) {
; CHECK-LABEL: define <1 x i1> @fcmp_vec_trunc_scalar(
; CHECK-SAME: <1 x double> [[TMP0:%.*]]) {
; CHECK-NEXT:    [[CMP:%.*]] = fcmp fast olt <1 x double> [[TMP0]], <double 0x3FEFFFFFF0000000>
; CHECK-NEXT:    ret <1 x i1> [[CMP]]
;
  %vec = fptrunc <1 x double> %0 to <1 x float>
  %cmp = fcmp fast olt <1 x float> %vec, <float 1.0>
  ret <1 x i1> %cmp
}

define i1 @fcmp_trunc_fp128(fp128 %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_fp128(
; CHECK-SAME: fp128 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge fp128 [[TMP0]], 0xL000000000000000040058FFFFF000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc fp128 %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_x86_fp80(x86_fp80 %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_x86_fp80(
; CHECK-SAME: x86_fp80 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge x86_fp80 [[TMP0]], 0xK4005C7FFFF8000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc x86_fp80 %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_ppc_fp128(ppc_fp128 %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_ppc_fp128(
; CHECK-SAME: ppc_fp128 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge ppc_fp128 [[TMP0]], 0xM4058FFFFF0000000BD00000000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc ppc_fp128 %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_nan(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_nan(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    ret i1 false
;
  %trunc = fptrunc double %0 to float
  %result = fcmp oge float %trunc, 0x7FF8000000000000
  ret i1 %result
}

; denomalized 0x00000001
define i1 @fcmp_trunc_d1(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_d1(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp oge double [[TMP0]], 0x3690000000000001
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp oge float %trunc, 1.40129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125e-45
  ret i1 %result
}

; denomalized 0x00000001 ole
define i1 @fcmp_trunc_d1_ole(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_d1_ole(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ole double [[TMP0]], 0x36A7FFFFFFFFFFFF
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ole float %trunc, 1.40129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125e-45
  ret i1 %result
}

; denomalized 0x00000002
define i1 @fcmp_trunc_d2(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_d2(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp oge double [[TMP0]], 0x36A8000000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp oge float %trunc, 2.8025969286496341418474591665798322625605238837530315435141365677795821653717212029732763767242431640625e-45
  ret i1 %result
}

; denomalized 0x7fffff
define i1 @fcmp_trunc_d3(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_d3(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ogt double [[TMP0]], 0x380FFFFFDFFFFFFF
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ogt float %trunc, 1.175494210692441075487029444849287348827052428745893333857174530571588870475618904265502351336181163787841796875e-38
  ret i1 %result
}

; denomalized 0x80000001
define i1 @fcmp_trunc_d4(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_d4(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ogt double [[TMP0]], 0xB690000000000001
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ogt float %trunc, -1.40129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125e-45
  ret i1 %result
}

; denomalized 0x80000001
define i1 @fcmp_trunc_d5(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_d5(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp olt double [[TMP0]], 0xB80FFFFFDFFFFFFF
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp olt float %trunc, -1.175494210692441075487029444849287348827052428745893333857174530571588870475618904265502351336181163787841796875e-38
  ret i1 %result
}


; +0
define i1 @fcmp_trunc_p0(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_p0(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp oge double [[TMP0]], 0xB690000000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp oge float %trunc, 0x00000000
  ret i1 %result
}


; -0
define i1 @fcmp_trunc_n0(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_n0(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ogt double [[TMP0]], 0x3690000000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ogt float %trunc, 0x8000000000000000
  ret i1 %result
}


; max representable
define i1 @fcmp_trunc_mx(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_mx(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ogt double [[TMP0]], 0x47EFFFFFEFFFFFFF
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ogt float %trunc, 0x47EFFFFFE0000000
  ret i1 %result
}

; min representable
define i1 @fcmp_trunc_mn(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_mn(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp olt double [[TMP0]], 0xC7EFFFFFEFFFFFFF
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp olt float %trunc, -3.4028234663852885981170418348451692544e38
  ret i1 %result
}


