; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=ipsccp,argpromotion < %s | FileCheck %s

@sudoku0 = internal global [9 x [9 x i32]] zeroinitializer
@sudoku1 = internal global [9 x [9 x i32]] zeroinitializer

declare void @callee2(ptr nocapture nonnull readonly %0)

define internal i64 @callee(ptr nocapture readonly %0, ptr nocapture readonly %1) local_unnamed_addr {
; CHECK-LABEL: define internal i64 @callee() local_unnamed_addr {
; CHECK-NEXT:    [[TMP1:%.*]] = alloca { ptr, i64 }, align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i8, ptr [[TMP1]], i64 8
; CHECK-NEXT:    store i64 4, ptr [[TMP2]], align 8
; CHECK-NEXT:    store ptr @sudoku1, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = alloca { ptr, i64 }, align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i8, ptr [[TMP3]], i64 8
; CHECK-NEXT:    store i64 4, ptr [[TMP4]], align 8
; CHECK-NEXT:    store ptr @sudoku0, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[MEGASTRUCT:%.*]] = alloca { ptr, ptr, { ptr, i64 }, { ptr, i64 } }, align 8
; CHECK-NEXT:    [[ALLOCA0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[ALLOCA1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[GEP_0_1:%.*]] = getelementptr inbounds i8, ptr [[TMP3]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[GEP_0_1]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP3]], align 8
; CHECK-NEXT:    [[GEP_1_1:%.*]] = getelementptr inbounds i8, ptr [[TMP1]], i64 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[GEP_1_1]], align 8
; CHECK-NEXT:    store ptr [[ALLOCA0]], ptr [[MEGASTRUCT]], align 8
; CHECK-NEXT:    [[MEGASTRUCT_GEP_1:%.*]] = getelementptr inbounds i8, ptr [[MEGASTRUCT]], i64 8
; CHECK-NEXT:    store ptr [[ALLOCA1]], ptr [[MEGASTRUCT_GEP_1]], align 8
; CHECK-NEXT:    [[MEGASTRUCT_GEP_2:%.*]] = getelementptr inbounds i8, ptr [[MEGASTRUCT]], i64 16
; CHECK-NEXT:    store ptr [[TMP5]], ptr [[MEGASTRUCT_GEP_2]], align 8
; CHECK-NEXT:    [[MEGASTRUCT_GEP_3:%.*]] = getelementptr inbounds i8, ptr [[MEGASTRUCT]], i64 24
; CHECK-NEXT:    store i64 [[TMP6]], ptr [[MEGASTRUCT_GEP_3]], align 8
; CHECK-NEXT:    [[MEGASTRUCT_GEP_4:%.*]] = getelementptr inbounds i8, ptr [[MEGASTRUCT]], i64 32
; CHECK-NEXT:    store ptr [[TMP7]], ptr [[MEGASTRUCT_GEP_4]], align 8
; CHECK-NEXT:    [[MEGASTRUCT_GEP_5:%.*]] = getelementptr inbounds i8, ptr [[MEGASTRUCT]], i64 40
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[MEGASTRUCT_GEP_5]], align 8
; CHECK-NEXT:    call fastcc void @callee2(ptr [[MEGASTRUCT]])
; CHECK-NEXT:    ret i64 poison
;
  %megastruct = alloca { ptr, ptr, { ptr, i64 }, { ptr, i64 } }

  %alloca0 = alloca i32, align 4
  %alloca1 = alloca i32, align 4

  %3 = load ptr, ptr %0, align 8
  %gep.0.1 = getelementptr inbounds i8, ptr %0, i64 8
  %4 = load i64, ptr %gep.0.1, align 8

  %5 = load ptr, ptr %0, align 8
  %gep.1.1 = getelementptr inbounds i8, ptr %1, i64 8
  %6 = load i64, ptr %gep.1.1, align 8

  store ptr %alloca0, ptr %megastruct, align 8
  %megastruct.gep.1 = getelementptr inbounds i8, ptr %megastruct, i64 8
  store ptr %alloca1, ptr %megastruct.gep.1, align 8

  %megastruct.gep.2 = getelementptr inbounds i8, ptr %megastruct, i64 16
  store ptr %3, ptr %megastruct.gep.2, align 8

  %megastruct.gep.3 = getelementptr inbounds i8, ptr %megastruct, i64 24
  store i64 %4, ptr %megastruct.gep.3, align 8

  %megastruct.gep.4 = getelementptr inbounds i8, ptr %megastruct, i64 32
  store ptr %5, ptr %megastruct.gep.4, align 8

  %megastruct.gep.5 = getelementptr inbounds i8, ptr %megastruct, i64 40
  store i64 %6, ptr %megastruct.gep.5, align 8

  call fastcc void @callee2(ptr %megastruct)
  ret i64 1
}

define i64 @caller() local_unnamed_addr {
; CHECK-LABEL: define i64 @caller() local_unnamed_addr {
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @callee()
; CHECK-NEXT:    ret i64 1
;
  %1 = alloca { ptr, i64 }, align 8
  %2 = alloca { ptr, i64 }, align 8

  store ptr @sudoku0, ptr %1, align 8
  %.gep0 = getelementptr inbounds i8, ptr %1, i64 8
  store i64 4, ptr %.gep0, align 8

  store ptr @sudoku1, ptr %2, align 8
  %.gep1 = getelementptr inbounds i8, ptr %2, i64 8
  store i64 4, ptr %.gep1, align 8

  %p = call i64 @callee(ptr nonnull %1, ptr nonnull %2)
  ret i64 %p
}

define i64 @m() local_unnamed_addr {
; CHECK-LABEL: define i64 @m() local_unnamed_addr {
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @caller()
; CHECK-NEXT:    ret i64 1
;
  %1 = call i64 @caller()
  ret i64 %1
}
