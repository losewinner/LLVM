; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=spirv32-- -passes=infer-address-spaces %s | FileCheck %s
; RUN: opt -S -mtriple=spirv64-- -passes=infer-address-spaces %s | FileCheck %s

; Trivial optimization of generic addressing

define float @load_global_from_flat(ptr addrspace(4) %generic_scalar) #0 {
; CHECK-LABEL: define float @load_global_from_flat(
; CHECK-SAME: ptr addrspace(4) [[GENERIC_SCALAR:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(4) [[GENERIC_SCALAR]] to ptr addrspace(1)
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr addrspace(1) [[TMP0]], align 4
; CHECK-NEXT:    ret float [[TMP1]]
;
  %tmp0 = addrspacecast ptr addrspace(4) %generic_scalar to ptr addrspace(1)
  %tmp1 = load float, ptr addrspace(1) %tmp0
  ret float %tmp1
}

define float @load_group_from_flat(ptr addrspace(4) %generic_scalar) #0 {
; CHECK-LABEL: define float @load_group_from_flat(
; CHECK-SAME: ptr addrspace(4) [[GENERIC_SCALAR:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(4) [[GENERIC_SCALAR]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr addrspace(3) [[TMP0]], align 4
; CHECK-NEXT:    ret float [[TMP1]]
;
  %tmp0 = addrspacecast ptr addrspace(4) %generic_scalar to ptr addrspace(3)
  %tmp1 = load float, ptr addrspace(3) %tmp0
  ret float %tmp1
}

define float @load_private_from_flat(ptr addrspace(4) %generic_scalar) #0 {
; CHECK-LABEL: define float @load_private_from_flat(
; CHECK-SAME: ptr addrspace(4) [[GENERIC_SCALAR:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(4) [[GENERIC_SCALAR]] to ptr
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr [[TMP0]], align 4
; CHECK-NEXT:    ret float [[TMP1]]
;
  %tmp0 = addrspacecast ptr addrspace(4) %generic_scalar to ptr
  %tmp1 = load float, ptr %tmp0
  ret float %tmp1
}

define spir_kernel void @store_global_from_flat(ptr addrspace(4) %generic_scalar) #0 {
; CHECK-LABEL: define spir_kernel void @store_global_from_flat(
; CHECK-SAME: ptr addrspace(4) [[GENERIC_SCALAR:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(4) [[GENERIC_SCALAR]] to ptr addrspace(1)
; CHECK-NEXT:    store float 0.000000e+00, ptr addrspace(1) [[TMP0]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(4) %generic_scalar to ptr addrspace(1)
  store float 0.0, ptr addrspace(1) %tmp0
  ret void
}

define spir_kernel void @store_group_from_flat(ptr addrspace(4) %generic_scalar) #0 {
; CHECK-LABEL: define spir_kernel void @store_group_from_flat(
; CHECK-SAME: ptr addrspace(4) [[GENERIC_SCALAR:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(4) [[GENERIC_SCALAR]] to ptr addrspace(3)
; CHECK-NEXT:    store float 0.000000e+00, ptr addrspace(3) [[TMP0]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(4) %generic_scalar to ptr addrspace(3)
  store float 0.0, ptr addrspace(3) %tmp0
  ret void
}

define spir_kernel void @store_private_from_flat(ptr addrspace(4) %generic_scalar) #0 {
; CHECK-LABEL: define spir_kernel void @store_private_from_flat(
; CHECK-SAME: ptr addrspace(4) [[GENERIC_SCALAR:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(4) [[GENERIC_SCALAR]] to ptr
; CHECK-NEXT:    store float 0.000000e+00, ptr [[TMP0]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(4) %generic_scalar to ptr
  store float 0.0, ptr %tmp0
  ret void
}

define spir_kernel void @load_store_global(ptr addrspace(1) nocapture %input, ptr addrspace(1) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @load_store_global(
; CHECK-SAME: ptr addrspace(1) nocapture [[INPUT:%.*]], ptr addrspace(1) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr addrspace(1) [[INPUT]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr addrspace(1) [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(1) %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr addrspace(1) %output to ptr addrspace(4)
  %val = load i32, ptr addrspace(4) %tmp0, align 4
  store i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @load_store_group(ptr addrspace(3) nocapture %input, ptr addrspace(3) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @load_store_group(
; CHECK-SAME: ptr addrspace(3) nocapture [[INPUT:%.*]], ptr addrspace(3) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr addrspace(3) [[INPUT]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr addrspace(3) [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(3) %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr addrspace(3) %output to ptr addrspace(4)
  %val = load i32, ptr addrspace(4) %tmp0, align 4
  store i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @load_store_private(ptr nocapture %input, ptr nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @load_store_private(
; CHECK-SAME: ptr nocapture [[INPUT:%.*]], ptr nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr [[INPUT]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr %output to ptr addrspace(4)
  %val = load i32, ptr addrspace(4) %tmp0, align 4
  store i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @load_store_flat(ptr addrspace(4) nocapture %input, ptr addrspace(4) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @load_store_flat(
; CHECK-SAME: ptr addrspace(4) nocapture [[INPUT:%.*]], ptr addrspace(4) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr addrspace(4) [[INPUT]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr addrspace(4) [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %val = load i32, ptr addrspace(4) %input, align 4
  store i32 %val, ptr addrspace(4) %output, align 4
  ret void
}

define spir_kernel void @store_addrspacecast_ptr_value(ptr addrspace(1) nocapture %input, ptr addrspace(1) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @store_addrspacecast_ptr_value(
; CHECK-SAME: ptr addrspace(1) nocapture [[INPUT:%.*]], ptr addrspace(1) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(1) [[INPUT]] to ptr addrspace(4)
; CHECK-NEXT:    store ptr addrspace(4) [[CAST]], ptr addrspace(1) [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %cast = addrspacecast ptr addrspace(1) %input to ptr addrspace(4)
  store ptr addrspace(4) %cast, ptr addrspace(1) %output, align 4
  ret void
}

define i32 @atomicrmw_add_global_to_flat(ptr addrspace(1) %global.ptr, i32 %y) #0 {
; CHECK-LABEL: define i32 @atomicrmw_add_global_to_flat(
; CHECK-SAME: ptr addrspace(1) [[GLOBAL_PTR:%.*]], i32 [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = atomicrmw add ptr addrspace(1) [[GLOBAL_PTR]], i32 [[Y]] seq_cst, align 4
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cast = addrspacecast ptr addrspace(1) %global.ptr to ptr addrspace(4)
  %ret = atomicrmw add ptr addrspace(4) %cast, i32 %y seq_cst
  ret i32 %ret
}

define i32 @atomicrmw_add_group_to_flat(ptr addrspace(3) %group.ptr, i32 %y) #0 {
; CHECK-LABEL: define i32 @atomicrmw_add_group_to_flat(
; CHECK-SAME: ptr addrspace(3) [[GROUP_PTR:%.*]], i32 [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = atomicrmw add ptr addrspace(3) [[GROUP_PTR]], i32 [[Y]] seq_cst, align 4
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cast = addrspacecast ptr addrspace(3) %group.ptr to ptr addrspace(4)
  %ret = atomicrmw add ptr addrspace(4) %cast, i32 %y seq_cst
  ret i32 %ret
}

define { i32, i1 } @cmpxchg_global_to_flat(ptr addrspace(1) %global.ptr, i32 %cmp, i32 %val) #0 {
; CHECK-LABEL: define { i32, i1 } @cmpxchg_global_to_flat(
; CHECK-SAME: ptr addrspace(1) [[GLOBAL_PTR:%.*]], i32 [[CMP:%.*]], i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = cmpxchg ptr addrspace(1) [[GLOBAL_PTR]], i32 [[CMP]], i32 [[VAL]] seq_cst monotonic, align 4
; CHECK-NEXT:    ret { i32, i1 } [[RET]]
;
  %cast = addrspacecast ptr addrspace(1) %global.ptr to ptr addrspace(4)
  %ret = cmpxchg ptr addrspace(4) %cast, i32 %cmp, i32 %val seq_cst monotonic
  ret { i32, i1 } %ret
}

define { i32, i1 } @cmpxchg_group_to_flat(ptr addrspace(3) %group.ptr, i32 %cmp, i32 %val) #0 {
; CHECK-LABEL: define { i32, i1 } @cmpxchg_group_to_flat(
; CHECK-SAME: ptr addrspace(3) [[GROUP_PTR:%.*]], i32 [[CMP:%.*]], i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = cmpxchg ptr addrspace(3) [[GROUP_PTR]], i32 [[CMP]], i32 [[VAL]] seq_cst monotonic, align 4
; CHECK-NEXT:    ret { i32, i1 } [[RET]]
;
  %cast = addrspacecast ptr addrspace(3) %group.ptr to ptr addrspace(4)
  %ret = cmpxchg ptr addrspace(4) %cast, i32 %cmp, i32 %val seq_cst monotonic
  ret { i32, i1 } %ret
}

define { ptr addrspace(4), i1 } @cmpxchg_group_to_flat_wrong_operand(ptr addrspace(3) %cas.ptr, ptr addrspace(3) %cmp.ptr, ptr addrspace(4) %val) #0 {
  %cast.cmp = addrspacecast ptr addrspace(3) %cmp.ptr to ptr addrspace(4)
  %ret = cmpxchg ptr addrspace(3) %cas.ptr, ptr addrspace(4) %cast.cmp, ptr addrspace(4) %val seq_cst monotonic
  ret { ptr addrspace(4), i1 } %ret
}

define void @local_nullptr(ptr addrspace(1) nocapture %results, ptr addrspace(3) %a) {
; CHECK-LABEL: define void @local_nullptr(
; CHECK-SAME: ptr addrspace(1) nocapture [[RESULTS:%.*]], ptr addrspace(3) [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne ptr addrspace(3) [[A]], addrspacecast (ptr null to ptr addrspace(3))
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[TOBOOL]] to i32
; CHECK-NEXT:    store i32 [[CONV]], ptr addrspace(1) [[RESULTS]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %tobool = icmp ne ptr addrspace(3) %a, addrspacecast (ptr null to ptr addrspace(3))
  %conv = zext i1 %tobool to i32
  store i32 %conv, ptr addrspace(1) %results, align 4
  ret void
}

define i32 @atomicrmw_add_global_to_flat_preserve_amdgpu_md(ptr addrspace(1) %global.ptr, i32 %y) #0 {
; CHECK-LABEL: define i32 @atomicrmw_add_global_to_flat_preserve_amdgpu_md(
; CHECK-SAME: ptr addrspace(1) [[GLOBAL_PTR:%.*]], i32 [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = atomicrmw add ptr addrspace(1) [[GLOBAL_PTR]], i32 [[Y]] seq_cst, align 4, !amdgpu.no.fine.grained.memory [[META0:![0-9]+]], !amdgpu.no.remote.memory [[META0]]
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cast = addrspacecast ptr addrspace(1) %global.ptr to ptr addrspace(4)
  %ret = atomicrmw add ptr addrspace(4) %cast, i32 %y seq_cst, align 4, !amdgpu.no.fine.grained.memory !0, !amdgpu.no.remote.memory !0
  ret i32 %ret
}

define ptr addrspace(4) @try_infer_getelementptr_constant_null() {
; CHECK-LABEL: define ptr addrspace(4) @try_infer_getelementptr_constant_null() {
; CHECK-NEXT:    [[CE:%.*]] = getelementptr i8, ptr addrspace(4) getelementptr inbounds (i8, ptr addrspace(4) null, i64 8), i64 0
; CHECK-NEXT:    ret ptr addrspace(4) [[CE]]
;
  %ce = getelementptr i8, ptr addrspace(4) getelementptr inbounds (i8, ptr addrspace(4) null, i64 8), i64 0
  ret ptr addrspace(4) %ce
}

attributes #0 = { nounwind }

!0 = !{}
;.
; CHECK: [[META0]] = !{}
;.
