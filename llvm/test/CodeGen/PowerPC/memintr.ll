; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -verify-machineinstrs -mcpu=pwr9 -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr -mtriple=powerpc64le-unknown-linux-gnu < %s | \
; RUN:   FileCheck %s --check-prefix=CHECK-LE-P9
; RUN: llc -verify-machineinstrs -mcpu=pwr9 -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr -mtriple=powerpc64-unknown-linux-gnu < %s | \
; RUN:   FileCheck %s --check-prefix=CHECK-BE-P9
; RUN: llc -verify-machineinstrs -mcpu=pwr9 -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr -mtriple=powerpc64-ibm-aix < %s | \
; RUN:   FileCheck %s --check-prefix=CHECK-AIX-64-P9
; RUN: llc -verify-machineinstrs -mcpu=pwr9 -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr -mtriple=powerpc-ibm-aix < %s | \
; RUN:   FileCheck %s --check-prefix=CHECK-AIX-32-P9


define noundef ptr @memcpy_test(ptr noundef returned writeonly %destination, ptr nocapture noundef readonly %source, i32 noundef %num) local_unnamed_addr {
; CHECK-LE-P9-LABEL: memcpy_test:
; CHECK-LE-P9:       # %bb.0: # %entry
; CHECK-LE-P9-NEXT:    mflr r0
; CHECK-LE-P9-NEXT:    .cfi_def_cfa_offset 48
; CHECK-LE-P9-NEXT:    .cfi_offset lr, 16
; CHECK-LE-P9-NEXT:    .cfi_offset r30, -16
; CHECK-LE-P9-NEXT:    std r30, -16(r1) # 8-byte Folded Spill
; CHECK-LE-P9-NEXT:    stdu r1, -48(r1)
; CHECK-LE-P9-NEXT:    std r0, 64(r1)
; CHECK-LE-P9-NEXT:    mr r30, r3
; CHECK-LE-P9-NEXT:    bl memcpy
; CHECK-LE-P9-NEXT:    nop
; CHECK-LE-P9-NEXT:    mr r3, r30
; CHECK-LE-P9-NEXT:    addi r1, r1, 48
; CHECK-LE-P9-NEXT:    ld r0, 16(r1)
; CHECK-LE-P9-NEXT:    ld r30, -16(r1) # 8-byte Folded Reload
; CHECK-LE-P9-NEXT:    mtlr r0
; CHECK-LE-P9-NEXT:    blr
;
; CHECK-BE-P9-LABEL: memcpy_test:
; CHECK-BE-P9:       # %bb.0: # %entry
; CHECK-BE-P9-NEXT:    mflr r0
; CHECK-BE-P9-NEXT:    stdu r1, -128(r1)
; CHECK-BE-P9-NEXT:    std r0, 144(r1)
; CHECK-BE-P9-NEXT:    .cfi_def_cfa_offset 128
; CHECK-BE-P9-NEXT:    .cfi_offset lr, 16
; CHECK-BE-P9-NEXT:    .cfi_offset r30, -16
; CHECK-BE-P9-NEXT:    std r30, 112(r1) # 8-byte Folded Spill
; CHECK-BE-P9-NEXT:    mr r30, r3
; CHECK-BE-P9-NEXT:    bl memcpy
; CHECK-BE-P9-NEXT:    nop
; CHECK-BE-P9-NEXT:    mr r3, r30
; CHECK-BE-P9-NEXT:    ld r30, 112(r1) # 8-byte Folded Reload
; CHECK-BE-P9-NEXT:    addi r1, r1, 128
; CHECK-BE-P9-NEXT:    ld r0, 16(r1)
; CHECK-BE-P9-NEXT:    mtlr r0
; CHECK-BE-P9-NEXT:    blr
;
; CHECK-AIX-64-P9-LABEL: memcpy_test:
; CHECK-AIX-64-P9:       # %bb.0: # %entry
; CHECK-AIX-64-P9-NEXT:    mflr r0
; CHECK-AIX-64-P9-NEXT:    stdu r1, -128(r1)
; CHECK-AIX-64-P9-NEXT:    std r0, 144(r1)
; CHECK-AIX-64-P9-NEXT:    std r31, 120(r1) # 8-byte Folded Spill
; CHECK-AIX-64-P9-NEXT:    mr r31, r3
; CHECK-AIX-64-P9-NEXT:    bl .___memmove64[PR]
; CHECK-AIX-64-P9-NEXT:    nop
; CHECK-AIX-64-P9-NEXT:    mr r3, r31
; CHECK-AIX-64-P9-NEXT:    ld r31, 120(r1) # 8-byte Folded Reload
; CHECK-AIX-64-P9-NEXT:    addi r1, r1, 128
; CHECK-AIX-64-P9-NEXT:    ld r0, 16(r1)
; CHECK-AIX-64-P9-NEXT:    mtlr r0
; CHECK-AIX-64-P9-NEXT:    blr
;
; CHECK-AIX-32-P9-LABEL: memcpy_test:
; CHECK-AIX-32-P9:       # %bb.0: # %entry
; CHECK-AIX-32-P9-NEXT:    mflr r0
; CHECK-AIX-32-P9-NEXT:    stwu r1, -64(r1)
; CHECK-AIX-32-P9-NEXT:    stw r0, 72(r1)
; CHECK-AIX-32-P9-NEXT:    stw r31, 60(r1) # 4-byte Folded Spill
; CHECK-AIX-32-P9-NEXT:    mr r31, r3
; CHECK-AIX-32-P9-NEXT:    bl .___memmove[PR]
; CHECK-AIX-32-P9-NEXT:    nop
; CHECK-AIX-32-P9-NEXT:    mr r3, r31
; CHECK-AIX-32-P9-NEXT:    lwz r31, 60(r1) # 4-byte Folded Reload
; CHECK-AIX-32-P9-NEXT:    addi r1, r1, 64
; CHECK-AIX-32-P9-NEXT:    lwz r0, 8(r1)
; CHECK-AIX-32-P9-NEXT:    mtlr r0
; CHECK-AIX-32-P9-NEXT:    blr
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr align 1 %destination, ptr align 1 %source, i32 %num, i1 false)
  ret ptr %destination
}

declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg)

define i32 @memcmp_test(ptr nocapture noundef readonly %ptr1, ptr nocapture noundef readonly %ptr2, i32 noundef %num) local_unnamed_addr {
; CHECK-LE-P9-LABEL: memcmp_test:
; CHECK-LE-P9:       # %bb.0: # %entry
; CHECK-LE-P9-NEXT:    mflr r0
; CHECK-LE-P9-NEXT:    stdu r1, -32(r1)
; CHECK-LE-P9-NEXT:    std r0, 48(r1)
; CHECK-LE-P9-NEXT:    .cfi_def_cfa_offset 32
; CHECK-LE-P9-NEXT:    .cfi_offset lr, 16
; CHECK-LE-P9-NEXT:    bl memcmp
; CHECK-LE-P9-NEXT:    nop
; CHECK-LE-P9-NEXT:    addi r1, r1, 32
; CHECK-LE-P9-NEXT:    ld r0, 16(r1)
; CHECK-LE-P9-NEXT:    mtlr r0
; CHECK-LE-P9-NEXT:    blr
;
; CHECK-BE-P9-LABEL: memcmp_test:
; CHECK-BE-P9:       # %bb.0: # %entry
; CHECK-BE-P9-NEXT:    mflr r0
; CHECK-BE-P9-NEXT:    stdu r1, -112(r1)
; CHECK-BE-P9-NEXT:    std r0, 128(r1)
; CHECK-BE-P9-NEXT:    .cfi_def_cfa_offset 112
; CHECK-BE-P9-NEXT:    .cfi_offset lr, 16
; CHECK-BE-P9-NEXT:    bl memcmp
; CHECK-BE-P9-NEXT:    nop
; CHECK-BE-P9-NEXT:    addi r1, r1, 112
; CHECK-BE-P9-NEXT:    ld r0, 16(r1)
; CHECK-BE-P9-NEXT:    mtlr r0
; CHECK-BE-P9-NEXT:    blr
;
; CHECK-AIX-64-P9-LABEL: memcmp_test:
; CHECK-AIX-64-P9:       # %bb.0: # %entry
; CHECK-AIX-64-P9-NEXT:    mflr r0
; CHECK-AIX-64-P9-NEXT:    stdu r1, -112(r1)
; CHECK-AIX-64-P9-NEXT:    std r0, 128(r1)
; CHECK-AIX-64-P9-NEXT:    bl .___memcmp64[PR]
; CHECK-AIX-64-P9-NEXT:    nop
; CHECK-AIX-64-P9-NEXT:    addi r1, r1, 112
; CHECK-AIX-64-P9-NEXT:    ld r0, 16(r1)
; CHECK-AIX-64-P9-NEXT:    mtlr r0
; CHECK-AIX-64-P9-NEXT:    blr
;
; CHECK-AIX-32-P9-LABEL: memcmp_test:
; CHECK-AIX-32-P9:       # %bb.0: # %entry
; CHECK-AIX-32-P9-NEXT:    mflr r0
; CHECK-AIX-32-P9-NEXT:    stwu r1, -64(r1)
; CHECK-AIX-32-P9-NEXT:    stw r0, 72(r1)
; CHECK-AIX-32-P9-NEXT:    bl .___memcmp[PR]
; CHECK-AIX-32-P9-NEXT:    nop
; CHECK-AIX-32-P9-NEXT:    addi r1, r1, 64
; CHECK-AIX-32-P9-NEXT:    lwz r0, 8(r1)
; CHECK-AIX-32-P9-NEXT:    mtlr r0
; CHECK-AIX-32-P9-NEXT:    blr
entry:
  %0 = tail call i32 @llvm.memcmp.p0.p0.i32(ptr %ptr1, ptr %ptr2, i32 %num)
  ret i32 %0
}

declare i32 @llvm.memcmp.p0.p0.i32(ptr nocapture readonly, ptr nocapture readonly, i32)

