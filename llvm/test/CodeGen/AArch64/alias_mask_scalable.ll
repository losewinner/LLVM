; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64 -mattr=+sve2 %s -o - | FileCheck %s --check-prefix=CHECK-SVE2
; RUN: llc -mtriple=aarch64 -mattr=+sve %s -o - | FileCheck %s --check-prefix=CHECK-SVE

define <vscale x 16 x i1> @whilewr_8(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilewr_8:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilewr p0.b, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilewr_8:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    sub x8, x1, x0
; CHECK-SVE-NEXT:    cmp x8, #1
; CHECK-SVE-NEXT:    cset w9, lt
; CHECK-SVE-NEXT:    whilelo p0.b, #0, x8
; CHECK-SVE-NEXT:    sbfx x8, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p1.b, xzr, x8
; CHECK-SVE-NEXT:    sel p0.b, p0, p0.b, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 16 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 1, i1 1)
  ret <vscale x 16 x i1> %0
}

define <vscale x 8 x i1> @whilewr_16(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilewr_16:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilewr p0.h, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilewr_16:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    sub x8, x1, x0
; CHECK-SVE-NEXT:    add x8, x8, x8, lsr #63
; CHECK-SVE-NEXT:    asr x8, x8, #1
; CHECK-SVE-NEXT:    cmp x8, #1
; CHECK-SVE-NEXT:    cset w9, lt
; CHECK-SVE-NEXT:    whilelo p0.h, #0, x8
; CHECK-SVE-NEXT:    sbfx x8, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p1.h, xzr, x8
; CHECK-SVE-NEXT:    sel p0.b, p0, p0.b, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 8 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 2, i1 1)
  ret <vscale x 8 x i1> %0
}

define <vscale x 4 x i1> @whilewr_32(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilewr_32:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilewr p0.s, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilewr_32:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    sub x8, x1, x0
; CHECK-SVE-NEXT:    add x9, x8, #3
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    csel x8, x9, x8, lt
; CHECK-SVE-NEXT:    asr x8, x8, #2
; CHECK-SVE-NEXT:    cmp x8, #1
; CHECK-SVE-NEXT:    cset w9, lt
; CHECK-SVE-NEXT:    whilelo p1.s, #0, x8
; CHECK-SVE-NEXT:    sbfx x9, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p0.s, xzr, x9
; CHECK-SVE-NEXT:    mov p0.b, p1/m, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 4 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 4, i1 1)
  ret <vscale x 4 x i1> %0
}

define <vscale x 2 x i1> @whilewr_64(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilewr_64:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilewr p0.d, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilewr_64:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    sub x8, x1, x0
; CHECK-SVE-NEXT:    add x9, x8, #7
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    csel x8, x9, x8, lt
; CHECK-SVE-NEXT:    asr x8, x8, #3
; CHECK-SVE-NEXT:    cmp x8, #1
; CHECK-SVE-NEXT:    cset w9, lt
; CHECK-SVE-NEXT:    whilelo p1.d, #0, x8
; CHECK-SVE-NEXT:    sbfx x9, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p0.d, xzr, x9
; CHECK-SVE-NEXT:    mov p0.b, p1/m, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 2 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 8, i1 1)
  ret <vscale x 2 x i1> %0
}

define <vscale x 16 x i1> @whilerw_8(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilerw_8:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilerw p0.b, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilerw_8:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    subs x8, x1, x0
; CHECK-SVE-NEXT:    cneg x8, x8, mi
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    cset w9, eq
; CHECK-SVE-NEXT:    whilelo p0.b, #0, x8
; CHECK-SVE-NEXT:    sbfx x8, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p1.b, xzr, x8
; CHECK-SVE-NEXT:    sel p0.b, p0, p0.b, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 16 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 1, i1 0)
  ret <vscale x 16 x i1> %0
}

define <vscale x 8 x i1> @whilerw_16(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilerw_16:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilerw p0.h, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilerw_16:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    subs x8, x1, x0
; CHECK-SVE-NEXT:    cneg x8, x8, mi
; CHECK-SVE-NEXT:    add x8, x8, x8, lsr #63
; CHECK-SVE-NEXT:    asr x8, x8, #1
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    cset w9, eq
; CHECK-SVE-NEXT:    whilelo p0.h, #0, x8
; CHECK-SVE-NEXT:    sbfx x8, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p1.h, xzr, x8
; CHECK-SVE-NEXT:    sel p0.b, p0, p0.b, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 8 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 2, i1 0)
  ret <vscale x 8 x i1> %0
}

define <vscale x 4 x i1> @whilerw_32(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilerw_32:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilerw p0.s, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilerw_32:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    subs x8, x1, x0
; CHECK-SVE-NEXT:    cneg x8, x8, mi
; CHECK-SVE-NEXT:    add x9, x8, #3
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    csel x8, x9, x8, lt
; CHECK-SVE-NEXT:    asr x8, x8, #2
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    cset w9, eq
; CHECK-SVE-NEXT:    whilelo p1.s, #0, x8
; CHECK-SVE-NEXT:    sbfx x9, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p0.s, xzr, x9
; CHECK-SVE-NEXT:    mov p0.b, p1/m, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 4 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 4, i1 0)
  ret <vscale x 4 x i1> %0
}

define <vscale x 2 x i1> @whilerw_64(i64 %a, i64 %b) {
; CHECK-SVE2-LABEL: whilerw_64:
; CHECK-SVE2:       // %bb.0: // %entry
; CHECK-SVE2-NEXT:    whilerw p0.d, x0, x1
; CHECK-SVE2-NEXT:    ret
;
; CHECK-SVE-LABEL: whilerw_64:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    subs x8, x1, x0
; CHECK-SVE-NEXT:    cneg x8, x8, mi
; CHECK-SVE-NEXT:    add x9, x8, #7
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    csel x8, x9, x8, lt
; CHECK-SVE-NEXT:    asr x8, x8, #3
; CHECK-SVE-NEXT:    cmp x8, #0
; CHECK-SVE-NEXT:    cset w9, eq
; CHECK-SVE-NEXT:    whilelo p1.d, #0, x8
; CHECK-SVE-NEXT:    sbfx x9, x9, #0, #1
; CHECK-SVE-NEXT:    whilelo p0.d, xzr, x9
; CHECK-SVE-NEXT:    mov p0.b, p1/m, p1.b
; CHECK-SVE-NEXT:    ret
entry:
  %0 = call <vscale x 2 x i1> @llvm.experimental.get.alias.lane.mask.v8i1.i64.i64(i64 %a, i64 %b, i64 8, i1 0)
  ret <vscale x 2 x i1> %0
}
