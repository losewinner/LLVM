# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 2
# RUN: llc -mtriple aarch64 -run-pass=aarch64-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_signle_g_constant
body:             |
  bb.1:
    liveins: $w0

    ; CHECK-LABEL: name: test_signle_g_constant
    ; CHECK: liveins: $w0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -2
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: $w0 = COPY [[AND]](s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %1:_(s32) = COPY $w0
    %2:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_LSHR %1, %2
    %4:_(s32) = G_SHL %3, %2(s32)
    $w0 = COPY %4
    RET_ReallyLR implicit $w0

...
---
name:            test_double_g_constant
body:             |
  bb.1:
    liveins: $w0

    ; CHECK-LABEL: name: test_double_g_constant
    ; CHECK: liveins: $w0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -2
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: $w0 = COPY [[AND]](s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %1:_(s32) = COPY $w0
    %2:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_CONSTANT i32 1
    %4:_(s32) = G_LSHR %1, %2
    %5:_(s32) = G_SHL %4, %3(s32)
    $w0 = COPY %5
    RET_ReallyLR implicit $w0

...
---
name:            test_const_2
body:             |
  bb.1:
    liveins: $w0

    ; CHECK-LABEL: name: test_const_2
    ; CHECK: liveins: $w0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -4
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: $w0 = COPY [[AND]](s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %1:_(s32) = COPY $w0
    %2:_(s32) = G_CONSTANT i32 2
    %3:_(s32) = G_LSHR %1, %2
    %4:_(s32) = G_SHL %3, %2(s32)
    $w0 = COPY %4
    RET_ReallyLR implicit $w0

...
---
name:            test_const_3
body:             |
  bb.1:
    liveins: $w0

    ; CHECK-LABEL: name: test_const_3
    ; CHECK: liveins: $w0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -8
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: $w0 = COPY [[AND]](s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %1:_(s32) = COPY $w0
    %2:_(s32) = G_CONSTANT i32 3
    %3:_(s32) = G_LSHR %1, %2
    %4:_(s32) = G_SHL %3, %2(s32)
    $w0 = COPY %4
    RET_ReallyLR implicit $w0

...
---
name:            test_const_4
body:             |
  bb.1:
    liveins: $w0

    ; CHECK-LABEL: name: test_const_4
    ; CHECK: liveins: $w0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $w0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -16
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: $w0 = COPY [[AND]](s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %1:_(s32) = COPY $w0
    %2:_(s32) = G_CONSTANT i32 4
    %3:_(s32) = G_LSHR %1, %2
    %4:_(s32) = G_SHL %3, %2(s32)
    $w0 = COPY %4
    RET_ReallyLR implicit $w0

...
---
name:            test_vector
body:             |
  bb.1:
    liveins: $w1, $x0

    ; CHECK-LABEL: name: test_vector
    ; CHECK: liveins: $w1, $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $w1
    ; CHECK-NEXT: %xvec:_(<4 x s32>) = G_BUILD_VECTOR [[COPY1]](s32), [[COPY1]](s32), [[COPY1]](s32), [[COPY1]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -4
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(<4 x s32>) = G_AND %xvec, [[BUILD_VECTOR]]
    ; CHECK-NEXT: G_STORE [[AND]](<4 x s32>), [[COPY]](p0) :: (store (<4 x s32>))
    ; CHECK-NEXT: RET_ReallyLR
    %0:_(p0) = COPY $x0
    %1:_(s32) = COPY $w1
    %xvec:_(<4 x s32>) = G_BUILD_VECTOR %1, %1, %1, %1
    %2:_(s32) = G_CONSTANT i32 2
    %veccst:_(<4 x s32>) = G_BUILD_VECTOR %2, %2, %2, %2
    %3:_(<4 x s32>) = G_LSHR %xvec, %veccst
    %5:_(<4 x s32>) = G_SHL %3, %veccst
    G_STORE %5(<4 x s32>), %0(p0) :: (store (<4 x s32>))
    RET_ReallyLR

...
