; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple arm64-apple-ios -mattr +cmpbr -verify-machineinstrs -o - < %s | FileCheck %s


define void @cbgt_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cbgt_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbgt w0, w1, LBB0_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB0_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp sgt i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbge_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cbge_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbge w0, w1, LBB1_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB1_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp sge i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}


define void @cbhi_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cbhi_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhi w0, w1, LBB2_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB2_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ugt i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbhs_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cbhs_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhs w0, w1, LBB3_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB3_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp uge i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbeq_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cbeq_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbeq w0, w1, LBB4_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB4_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp eq i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbne_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cbne_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbne w0, w1, LBB5_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB5_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ne i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cble_ge_swap_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cble_ge_swap_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbge w1, w0, LBB6_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB6_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp sle i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cblo_hi_swap_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cblo_hi_swap_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhi w1, w0, LBB7_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB7_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ult i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbls_hs_swap_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cbls_hs_swap_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhs w1, w0, LBB8_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB8_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ule i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cblt_gt_swap_i32(i32 %a, i32 %b)  {
; CHECK-LABEL: cblt_gt_swap_i32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbgt w1, w0, LBB9_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB9_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp slt i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbgt_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cbgt_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbgt x0, x1, LBB10_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB10_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp sgt i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbge_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cbge_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbge x0, x1, LBB11_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB11_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp sge i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}


define void @cbhi_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cbhi_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhi x0, x1, LBB12_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB12_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ugt i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbhs_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cbhs_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhs x0, x1, LBB13_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB13_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp uge i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbeq_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cbeq_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbeq x0, x1, LBB14_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB14_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp eq i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbne_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cbne_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbne x0, x1, LBB15_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB15_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ne i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cble_ge_swap_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cble_ge_swap_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbge x1, x0, LBB16_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB16_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp sle i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cblo_hi_swap_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cblo_hi_swap_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhi x1, x0, LBB17_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB17_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ult i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbls_hs_swap_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cbls_hs_swap_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbhs x1, x0, LBB18_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB18_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp ule i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cblt_gt_swap_i64(i64 %a, i64 %b)  {
; CHECK-LABEL: cblt_gt_swap_i64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cbgt x1, x0, LBB19_2
; CHECK-NEXT:  ; %bb.1: ; %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB19_2: ; %if.then
; CHECK-NEXT:    brk #0x1
entry:
  %cmp = icmp slt i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}
