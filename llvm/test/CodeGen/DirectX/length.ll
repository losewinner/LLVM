; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S  -dxil-intrinsic-expansion  < %s | FileCheck %s --check-prefixes=CHECK,EXPCHECK
; RUN: opt -S  -dxil-intrinsic-expansion -scalarizer -dxil-op-lower -mtriple=dxil-pc-shadermodel6.3-library < %s | FileCheck %s --check-prefixes=CHECK,DOPCHECK

; Make sure dxil operation function calls for length are generated for half/float.

define noundef half @test_length_half2(<2 x half> noundef %p0) {
; EXPCHECK-LABEL: define noundef half @test_length_half2(
; EXPCHECK-SAME: <2 x half> noundef [[P0:%.*]]) {
; EXPCHECK-NEXT:  [[ENTRY:.*:]]
; EXPCHECK-NEXT:    [[MUL_I:%.*]] = fmul <2 x half> [[P0]], [[P0]]
; EXPCHECK-NEXT:    [[TMP0:%.*]] = extractelement <2 x half> [[MUL_I]], i64 0
; EXPCHECK-NEXT:    [[TMP1:%.*]] = extractelement <2 x half> [[MUL_I]], i64 1
; EXPCHECK-NEXT:    [[TMP2:%.*]] = fadd half [[TMP0]], [[TMP1]]
; EXPCHECK-NEXT:    [[HLSL_LENGTH:%.*]] = call half @llvm.sqrt.f16(half [[TMP2]])
; EXPCHECK-NEXT:    ret half [[HLSL_LENGTH]]
;
; DOPCHECK-LABEL: define noundef half @test_length_half2(
; DOPCHECK-SAME: <2 x half> noundef [[P0:%.*]]) {
; DOPCHECK-NEXT:  [[ENTRY:.*:]]
; DOPCHECK-NEXT:    [[P0_I0:%.*]] = extractelement <2 x half> [[P0]], i64 0
; DOPCHECK-NEXT:    [[MUL_I_I0:%.*]] = fmul half [[P0_I0]], [[P0_I0]]
; DOPCHECK-NEXT:    [[P0_I1:%.*]] = extractelement <2 x half> [[P0]], i64 1
; DOPCHECK-NEXT:    [[MUL_I_I1:%.*]] = fmul half [[P0_I1]], [[P0_I1]]
; DOPCHECK-NEXT:    [[TMP0:%.*]] = fadd half [[MUL_I_I0]], [[MUL_I_I1]]
; DOPCHECK-NEXT:    [[HLSL_LENGTH1:%.*]] = call half @dx.op.unary.f16(i32 24, half [[TMP0]])
; DOPCHECK-NEXT:    ret half [[HLSL_LENGTH1]]
;
entry:
  %mul.i = fmul <2 x half> %p0, %p0
  %rdx.fadd.i = call half @llvm.vector.reduce.fadd.v2f16(half 0xH0000, <2 x half> %mul.i)
  %hlsl.length = call half @llvm.sqrt.f16(half %rdx.fadd.i)
  ret half %hlsl.length
}

define noundef half @test_length_half3(<3 x half> noundef %p0) {
; EXPCHECK-LABEL: define noundef half @test_length_half3(
; EXPCHECK-SAME: <3 x half> noundef [[P0:%.*]]) {
; EXPCHECK-NEXT:  [[ENTRY:.*:]]
; EXPCHECK-NEXT:    [[MUL_I:%.*]] = fmul <3 x half> [[P0]], [[P0]]
; EXPCHECK-NEXT:    [[TMP0:%.*]] = extractelement <3 x half> [[MUL_I]], i64 0
; EXPCHECK-NEXT:    [[TMP1:%.*]] = extractelement <3 x half> [[MUL_I]], i64 1
; EXPCHECK-NEXT:    [[TMP2:%.*]] = fadd half [[TMP0]], [[TMP1]]
; EXPCHECK-NEXT:    [[TMP3:%.*]] = extractelement <3 x half> [[MUL_I]], i64 2
; EXPCHECK-NEXT:    [[TMP4:%.*]] = fadd half [[TMP2]], [[TMP3]]
; EXPCHECK-NEXT:    [[HLSL_LENGTH:%.*]] = call half @llvm.sqrt.f16(half [[TMP4]])
; EXPCHECK-NEXT:    ret half [[HLSL_LENGTH]]
;
; DOPCHECK-LABEL: define noundef half @test_length_half3(
; DOPCHECK-SAME: <3 x half> noundef [[P0:%.*]]) {
; DOPCHECK-NEXT:  [[ENTRY:.*:]]
; DOPCHECK-NEXT:    [[P0_I0:%.*]] = extractelement <3 x half> [[P0]], i64 0
; DOPCHECK-NEXT:    [[MUL_I_I0:%.*]] = fmul half [[P0_I0]], [[P0_I0]]
; DOPCHECK-NEXT:    [[P0_I1:%.*]] = extractelement <3 x half> [[P0]], i64 1
; DOPCHECK-NEXT:    [[MUL_I_I1:%.*]] = fmul half [[P0_I1]], [[P0_I1]]
; DOPCHECK-NEXT:    [[P0_I2:%.*]] = extractelement <3 x half> [[P0]], i64 2
; DOPCHECK-NEXT:    [[MUL_I_I2:%.*]] = fmul half [[P0_I2]], [[P0_I2]]
; DOPCHECK-NEXT:    [[TMP0:%.*]] = fadd half [[MUL_I_I0]], [[MUL_I_I1]]
; DOPCHECK-NEXT:    [[TMP1:%.*]] = fadd half [[TMP0]], [[MUL_I_I2]]
; DOPCHECK-NEXT:    [[HLSL_LENGTH1:%.*]] = call half @dx.op.unary.f16(i32 24, half [[TMP1]])
; DOPCHECK-NEXT:    ret half [[HLSL_LENGTH1]]
;
entry:
  %mul.i = fmul <3 x half> %p0, %p0
  %rdx.fadd.i = call half @llvm.vector.reduce.fadd.v2f16(half 0xH0000, <3 x half> %mul.i)
  %hlsl.length = call half @llvm.sqrt.f16(half %rdx.fadd.i)
  ret half %hlsl.length
}

define noundef half @test_length_half4(<4 x half> noundef %p0) {
; EXPCHECK-LABEL: define noundef half @test_length_half4(
; EXPCHECK-SAME: <4 x half> noundef [[P0:%.*]]) {
; EXPCHECK-NEXT:  [[ENTRY:.*:]]
; EXPCHECK-NEXT:    [[MUL_I:%.*]] = fmul <4 x half> [[P0]], [[P0]]
; EXPCHECK-NEXT:    [[TMP0:%.*]] = extractelement <4 x half> [[MUL_I]], i64 0
; EXPCHECK-NEXT:    [[TMP1:%.*]] = extractelement <4 x half> [[MUL_I]], i64 1
; EXPCHECK-NEXT:    [[TMP2:%.*]] = fadd half [[TMP0]], [[TMP1]]
; EXPCHECK-NEXT:    [[TMP3:%.*]] = extractelement <4 x half> [[MUL_I]], i64 2
; EXPCHECK-NEXT:    [[TMP4:%.*]] = fadd half [[TMP2]], [[TMP3]]
; EXPCHECK-NEXT:    [[TMP5:%.*]] = extractelement <4 x half> [[MUL_I]], i64 3
; EXPCHECK-NEXT:    [[TMP6:%.*]] = fadd half [[TMP4]], [[TMP5]]
; EXPCHECK-NEXT:    [[HLSL_LENGTH:%.*]] = call half @llvm.sqrt.f16(half [[TMP6]])
; EXPCHECK-NEXT:    ret half [[HLSL_LENGTH]]
;
; DOPCHECK-LABEL: define noundef half @test_length_half4(
; DOPCHECK-SAME: <4 x half> noundef [[P0:%.*]]) {
; DOPCHECK-NEXT:  [[ENTRY:.*:]]
; DOPCHECK-NEXT:    [[P0_I0:%.*]] = extractelement <4 x half> [[P0]], i64 0
; DOPCHECK-NEXT:    [[MUL_I_I0:%.*]] = fmul half [[P0_I0]], [[P0_I0]]
; DOPCHECK-NEXT:    [[P0_I1:%.*]] = extractelement <4 x half> [[P0]], i64 1
; DOPCHECK-NEXT:    [[MUL_I_I1:%.*]] = fmul half [[P0_I1]], [[P0_I1]]
; DOPCHECK-NEXT:    [[P0_I2:%.*]] = extractelement <4 x half> [[P0]], i64 2
; DOPCHECK-NEXT:    [[MUL_I_I2:%.*]] = fmul half [[P0_I2]], [[P0_I2]]
; DOPCHECK-NEXT:    [[P0_I3:%.*]] = extractelement <4 x half> [[P0]], i64 3
; DOPCHECK-NEXT:    [[MUL_I_I3:%.*]] = fmul half [[P0_I3]], [[P0_I3]]
; DOPCHECK-NEXT:    [[TMP0:%.*]] = fadd half [[MUL_I_I0]], [[MUL_I_I1]]
; DOPCHECK-NEXT:    [[TMP1:%.*]] = fadd half [[TMP0]], [[MUL_I_I2]]
; DOPCHECK-NEXT:    [[TMP2:%.*]] = fadd half [[TMP1]], [[MUL_I_I3]]
; DOPCHECK-NEXT:    [[HLSL_LENGTH1:%.*]] = call half @dx.op.unary.f16(i32 24, half [[TMP2]])
; DOPCHECK-NEXT:    ret half [[HLSL_LENGTH1]]
;
entry:
  %mul.i = fmul <4 x half> %p0, %p0
  %rdx.fadd.i = call half @llvm.vector.reduce.fadd.v2f16(half 0xH0000, <4 x half> %mul.i)
  %hlsl.length = call half @llvm.sqrt.f16(half %rdx.fadd.i)
  ret half %hlsl.length
}

define noundef float @test_length_float2(<2 x float> noundef %p0) {
; EXPCHECK-LABEL: define noundef float @test_length_float2(
; EXPCHECK-SAME: <2 x float> noundef [[P0:%.*]]) {
; EXPCHECK-NEXT:  [[ENTRY:.*:]]
; EXPCHECK-NEXT:    [[MUL_I:%.*]] = fmul <2 x float> [[P0]], [[P0]]
; EXPCHECK-NEXT:    [[TMP0:%.*]] = extractelement <2 x float> [[MUL_I]], i64 0
; EXPCHECK-NEXT:    [[TMP1:%.*]] = extractelement <2 x float> [[MUL_I]], i64 1
; EXPCHECK-NEXT:    [[TMP2:%.*]] = fadd float [[TMP0]], [[TMP1]]
; EXPCHECK-NEXT:    [[HLSL_LENGTH:%.*]] = call float @llvm.sqrt.f32(float [[TMP2]])
; EXPCHECK-NEXT:    ret float [[HLSL_LENGTH]]
;
; DOPCHECK-LABEL: define noundef float @test_length_float2(
; DOPCHECK-SAME: <2 x float> noundef [[P0:%.*]]) {
; DOPCHECK-NEXT:  [[ENTRY:.*:]]
; DOPCHECK-NEXT:    [[P0_I0:%.*]] = extractelement <2 x float> [[P0]], i64 0
; DOPCHECK-NEXT:    [[MUL_I_I0:%.*]] = fmul float [[P0_I0]], [[P0_I0]]
; DOPCHECK-NEXT:    [[P0_I1:%.*]] = extractelement <2 x float> [[P0]], i64 1
; DOPCHECK-NEXT:    [[MUL_I_I1:%.*]] = fmul float [[P0_I1]], [[P0_I1]]
; DOPCHECK-NEXT:    [[TMP0:%.*]] = fadd float [[MUL_I_I0]], [[MUL_I_I1]]
; DOPCHECK-NEXT:    [[HLSL_LENGTH1:%.*]] = call float @dx.op.unary.f32(i32 24, float [[TMP0]])
; DOPCHECK-NEXT:    ret float [[HLSL_LENGTH1]]
;
entry:
  %mul.i = fmul <2 x float> %p0, %p0
  %rdx.fadd.i = call float @llvm.vector.reduce.fadd.v2f32(float 0.000000e+00, <2 x float> %mul.i)
  %hlsl.length = call float @llvm.sqrt.f32(float %rdx.fadd.i)
  ret float %hlsl.length
}

define noundef float @test_length_float3(<3 x float> noundef %p0) {
; EXPCHECK-LABEL: define noundef float @test_length_float3(
; EXPCHECK-SAME: <3 x float> noundef [[P0:%.*]]) {
; EXPCHECK-NEXT:  [[ENTRY:.*:]]
; EXPCHECK-NEXT:    [[MUL_I:%.*]] = fmul <3 x float> [[P0]], [[P0]]
; EXPCHECK-NEXT:    [[TMP0:%.*]] = extractelement <3 x float> [[MUL_I]], i64 0
; EXPCHECK-NEXT:    [[TMP1:%.*]] = extractelement <3 x float> [[MUL_I]], i64 1
; EXPCHECK-NEXT:    [[TMP2:%.*]] = fadd float [[TMP0]], [[TMP1]]
; EXPCHECK-NEXT:    [[TMP3:%.*]] = extractelement <3 x float> [[MUL_I]], i64 2
; EXPCHECK-NEXT:    [[TMP4:%.*]] = fadd float [[TMP2]], [[TMP3]]
; EXPCHECK-NEXT:    [[HLSL_LENGTH:%.*]] = call float @llvm.sqrt.f32(float [[TMP4]])
; EXPCHECK-NEXT:    ret float [[HLSL_LENGTH]]
;
; DOPCHECK-LABEL: define noundef float @test_length_float3(
; DOPCHECK-SAME: <3 x float> noundef [[P0:%.*]]) {
; DOPCHECK-NEXT:  [[ENTRY:.*:]]
; DOPCHECK-NEXT:    [[P0_I0:%.*]] = extractelement <3 x float> [[P0]], i64 0
; DOPCHECK-NEXT:    [[MUL_I_I0:%.*]] = fmul float [[P0_I0]], [[P0_I0]]
; DOPCHECK-NEXT:    [[P0_I1:%.*]] = extractelement <3 x float> [[P0]], i64 1
; DOPCHECK-NEXT:    [[MUL_I_I1:%.*]] = fmul float [[P0_I1]], [[P0_I1]]
; DOPCHECK-NEXT:    [[P0_I2:%.*]] = extractelement <3 x float> [[P0]], i64 2
; DOPCHECK-NEXT:    [[MUL_I_I2:%.*]] = fmul float [[P0_I2]], [[P0_I2]]
; DOPCHECK-NEXT:    [[TMP0:%.*]] = fadd float [[MUL_I_I0]], [[MUL_I_I1]]
; DOPCHECK-NEXT:    [[TMP1:%.*]] = fadd float [[TMP0]], [[MUL_I_I2]]
; DOPCHECK-NEXT:    [[HLSL_LENGTH1:%.*]] = call float @dx.op.unary.f32(i32 24, float [[TMP1]])
; DOPCHECK-NEXT:    ret float [[HLSL_LENGTH1]]
;
entry:
  %mul.i = fmul <3 x float> %p0, %p0
  %rdx.fadd.i = call float @llvm.vector.reduce.fadd.v2f32(float 0.000000e+00, <3 x float> %mul.i)
  %hlsl.length = call float @llvm.sqrt.f32(float %rdx.fadd.i)
  ret float %hlsl.length
}

define noundef float @test_length_float4(<4 x float> noundef %p0) {
; EXPCHECK-LABEL: define noundef float @test_length_float4(
; EXPCHECK-SAME: <4 x float> noundef [[P0:%.*]]) {
; EXPCHECK-NEXT:  [[ENTRY:.*:]]
; EXPCHECK-NEXT:    [[MUL_I:%.*]] = fmul <4 x float> [[P0]], [[P0]]
; EXPCHECK-NEXT:    [[TMP0:%.*]] = extractelement <4 x float> [[MUL_I]], i64 0
; EXPCHECK-NEXT:    [[TMP1:%.*]] = extractelement <4 x float> [[MUL_I]], i64 1
; EXPCHECK-NEXT:    [[TMP2:%.*]] = fadd float [[TMP0]], [[TMP1]]
; EXPCHECK-NEXT:    [[TMP3:%.*]] = extractelement <4 x float> [[MUL_I]], i64 2
; EXPCHECK-NEXT:    [[TMP4:%.*]] = fadd float [[TMP2]], [[TMP3]]
; EXPCHECK-NEXT:    [[TMP5:%.*]] = extractelement <4 x float> [[MUL_I]], i64 3
; EXPCHECK-NEXT:    [[TMP6:%.*]] = fadd float [[TMP4]], [[TMP5]]
; EXPCHECK-NEXT:    [[HLSL_LENGTH:%.*]] = call float @llvm.sqrt.f32(float [[TMP6]])
; EXPCHECK-NEXT:    ret float [[HLSL_LENGTH]]
;
; DOPCHECK-LABEL: define noundef float @test_length_float4(
; DOPCHECK-SAME: <4 x float> noundef [[P0:%.*]]) {
; DOPCHECK-NEXT:  [[ENTRY:.*:]]
; DOPCHECK-NEXT:    [[P0_I0:%.*]] = extractelement <4 x float> [[P0]], i64 0
; DOPCHECK-NEXT:    [[MUL_I_I0:%.*]] = fmul float [[P0_I0]], [[P0_I0]]
; DOPCHECK-NEXT:    [[P0_I1:%.*]] = extractelement <4 x float> [[P0]], i64 1
; DOPCHECK-NEXT:    [[MUL_I_I1:%.*]] = fmul float [[P0_I1]], [[P0_I1]]
; DOPCHECK-NEXT:    [[P0_I2:%.*]] = extractelement <4 x float> [[P0]], i64 2
; DOPCHECK-NEXT:    [[MUL_I_I2:%.*]] = fmul float [[P0_I2]], [[P0_I2]]
; DOPCHECK-NEXT:    [[P0_I3:%.*]] = extractelement <4 x float> [[P0]], i64 3
; DOPCHECK-NEXT:    [[MUL_I_I3:%.*]] = fmul float [[P0_I3]], [[P0_I3]]
; DOPCHECK-NEXT:    [[TMP0:%.*]] = fadd float [[MUL_I_I0]], [[MUL_I_I1]]
; DOPCHECK-NEXT:    [[TMP1:%.*]] = fadd float [[TMP0]], [[MUL_I_I2]]
; DOPCHECK-NEXT:    [[TMP2:%.*]] = fadd float [[TMP1]], [[MUL_I_I3]]
; DOPCHECK-NEXT:    [[HLSL_LENGTH1:%.*]] = call float @dx.op.unary.f32(i32 24, float [[TMP2]])
; DOPCHECK-NEXT:    ret float [[HLSL_LENGTH1]]
;
entry:
  %mul.i = fmul <4 x float> %p0, %p0
  %rdx.fadd.i = call float @llvm.vector.reduce.fadd.v2f32(float 0.000000e+00, <4 x float> %mul.i)
  %hlsl.length = call float @llvm.sqrt.f32(float %rdx.fadd.i)
  ret float %hlsl.length
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
