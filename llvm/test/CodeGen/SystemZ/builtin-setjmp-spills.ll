; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; Simulate register pressure  around setjmp call for integer arguments.
; Test assembly of funtion call foo in func() in setjmp if and else part.
; extern foo has 20 argument pointer to int.
; Test setjmp  store jmp_buf.
; Return address in slot 2.
; Stack Pointer in slot 4.
; Clobber %r6-%r15, %f8-%f15.

; RUN: llc < %s -mtriple=s390x-linux-gnu -O2 | FileCheck %s

declare i32 @llvm.eh.sjlj.setjmp(ptr)
declare void @foo(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr
@buf = global [10 x ptr] zeroinitializer, align 8
@t = global i32 0, align 4
@s = global i32 0, align 4
@r = global i32 0, align 4
@q = global i32 0, align 4
@p = global i32 0, align 4
@o = global i32 0, align 4
@n = global i32 0, align 4
@m = global i32 0, align 4
@l = global i32 0, align 4
@k = global i32 0, align 4
@j = global i32 0, align 4
@i = global i32 0, align 4
@h = global i32 0, align 4
@g = global i32 0, align 4
@f = global i32 0, align 4
@e = global i32 0, align 4
@d = global i32 0, align 4
@c = global i32 0, align 4
@b = global i32 0, align 4
@a = global i32 0, align 4

define signext i32 @func() {
; CHECK-LABEL: func:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stmg %r6, %r15, 48(%r15)
; CHECK-NEXT:    .cfi_offset %r6, -112
; CHECK-NEXT:    .cfi_offset %r7, -104
; CHECK-NEXT:    .cfi_offset %r8, -96
; CHECK-NEXT:    .cfi_offset %r9, -88
; CHECK-NEXT:    .cfi_offset %r10, -80
; CHECK-NEXT:    .cfi_offset %r11, -72
; CHECK-NEXT:    .cfi_offset %r12, -64
; CHECK-NEXT:    .cfi_offset %r13, -56
; CHECK-NEXT:    .cfi_offset %r14, -48
; CHECK-NEXT:    .cfi_offset %r15, -40
; CHECK-NEXT:    aghi %r15, -448
; CHECK-NEXT:    .cfi_def_cfa_offset 608
; CHECK-NEXT:    std %f8, 440(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    std %f9, 432(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    std %f10, 424(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    std %f11, 416(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    std %f12, 408(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    std %f13, 400(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    std %f14, 392(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    std %f15, 384(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset %f8, -168
; CHECK-NEXT:    .cfi_offset %f9, -176
; CHECK-NEXT:    .cfi_offset %f10, -184
; CHECK-NEXT:    .cfi_offset %f11, -192
; CHECK-NEXT:    .cfi_offset %f12, -200
; CHECK-NEXT:    .cfi_offset %f13, -208
; CHECK-NEXT:    .cfi_offset %f14, -216
; CHECK-NEXT:    .cfi_offset %f15, -224
; CHECK-NEXT:    lgrl %r1, buf@GOT
; CHECK-NEXT:    larl %r0, .LBB0_1
; CHECK-NEXT:    stg %r0, 8(%r1)
; CHECK-NEXT:    stg %r15, 24(%r1)
; CHECK-NEXT:  .LBB0_1: # Block address taken
; CHECK-NEXT:    # %entry
; CHECK-NEXT:  .LBB0_2: # %entry
; CHECK-NEXT:    lgrl %r1, t@GOT
; CHECK-NEXT:    stg %r1, 312(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    lgrl %r2, s@GOT
; CHECK-NEXT:    stg %r2, 304(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    lgrl %r3, r@GOT
; CHECK-NEXT:    stg %r3, 296(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    lgrl %r4, q@GOT
; CHECK-NEXT:    stg %r4, 288(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r1), 1
; CHECK-NEXT:    mvhi 0(%r2), 1
; CHECK-NEXT:    mvhi 0(%r3), 1
; CHECK-NEXT:    mvhi 0(%r4), 1
; CHECK-NEXT:    lgrl %r5, p@GOT
; CHECK-NEXT:    lgrl %r14, o@GOT
; CHECK-NEXT:    lgrl %r1, n@GOT
; CHECK-NEXT:    stg %r1, 280(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    lgrl %r9, m@GOT
; CHECK-NEXT:    mvhi 0(%r5), 1
; CHECK-NEXT:    stg %r5, 376(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r14), 1
; CHECK-NEXT:    stg %r14, 368(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r1), 1
; CHECK-NEXT:    mvhi 0(%r9), 1
; CHECK-NEXT:    stg %r9, 360(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    lgrl %r1, l@GOT
; CHECK-NEXT:    lgrl %r2, k@GOT
; CHECK-NEXT:    lgrl %r3, j@GOT
; CHECK-NEXT:    lgrl %r4, i@GOT
; CHECK-NEXT:    stg %r4, 344(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r1), 1
; CHECK-NEXT:    stg %r1, 352(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r2), 1
; CHECK-NEXT:    stg %r2, 336(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r3), 1
; CHECK-NEXT:    stg %r3, 328(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r4), 1
; CHECK-NEXT:    lgrl %r4, h@GOT
; CHECK-NEXT:    lgrl %r8, g@GOT
; CHECK-NEXT:    lgrl %r7, f@GOT
; CHECK-NEXT:    lgrl %r6, e@GOT
; CHECK-NEXT:    mvhi 0(%r4), 1
; CHECK-NEXT:    stg %r4, 320(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    mvhi 0(%r8), 1
; CHECK-NEXT:    mvhi 0(%r7), 1
; CHECK-NEXT:    mvhi 0(%r6), 1
; CHECK-NEXT:    lgrl %r13, d@GOT
; CHECK-NEXT:    lgrl %r12, c@GOT
; CHECK-NEXT:    lgrl %r11, b@GOT
; CHECK-NEXT:    lgrl %r10, a@GOT
; CHECK-NEXT:    mvhi 0(%r13), 1
; CHECK-NEXT:    mvhi 0(%r12), 1
; CHECK-NEXT:    mvhi 0(%r11), 1
; CHECK-NEXT:    mvhi 0(%r10), 1
; CHECK-NEXT:    mvc 272(8,%r15), 312(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    mvc 264(8,%r15), 304(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    mvc 256(8,%r15), 296(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    mvc 248(8,%r15), 288(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    stg %r5, 240(%r15)
; CHECK-NEXT:    stg %r14, 232(%r15)
; CHECK-NEXT:    mvc 224(8,%r15), 280(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    stg %r9, 216(%r15)
; CHECK-NEXT:    stg %r1, 208(%r15)
; CHECK-NEXT:    stg %r2, 200(%r15)
; CHECK-NEXT:    stg %r3, 192(%r15)
; CHECK-NEXT:    lg %r9, 344(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    stg %r9, 184(%r15)
; CHECK-NEXT:    stg %r4, 176(%r15)
; CHECK-NEXT:    stg %r8, 168(%r15)
; CHECK-NEXT:    stg %r7, 160(%r15)
; CHECK-NEXT:    lgr %r2, %r10
; CHECK-NEXT:    lgr %r3, %r11
; CHECK-NEXT:    lgr %r4, %r12
; CHECK-NEXT:    lgr %r5, %r13
; CHECK-NEXT:    brasl %r14, foo@PLT
; CHECK-NEXT:    l %r0, 0(%r11)
; CHECK-NEXT:    a %r0, 0(%r10)
; CHECK-NEXT:    a %r0, 0(%r12)
; CHECK-NEXT:    a %r0, 0(%r13)
; CHECK-NEXT:    a %r0, 0(%r6)
; CHECK-NEXT:    a %r0, 0(%r7)
; CHECK-NEXT:    a %r0, 0(%r8)
; CHECK-NEXT:    lg %r1, 320(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    a %r0, 0(%r9)
; CHECK-NEXT:    lg %r1, 328(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 336(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 352(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 360(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 280(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 368(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 376(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 288(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 296(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 304(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lg %r1, 312(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    a %r0, 0(%r1)
; CHECK-NEXT:    lgfr %r2, %r0
; CHECK-NEXT:    ld %f8, 440(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    ld %f9, 432(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    ld %f10, 424(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    ld %f11, 416(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    ld %f12, 408(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    ld %f13, 400(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    ld %f14, 392(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    ld %f15, 384(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    lmg %r6, %r15, 496(%r15)
; CHECK-NEXT:    br %r14
entry:
  %0 = tail call i32 @llvm.eh.sjlj.setjmp(ptr nonnull @buf)
  store i32 1, ptr @t, align 4
  store i32 1, ptr @s, align 4
  store i32 1, ptr @r, align 4
  store i32 1, ptr @q, align 4
  store i32 1, ptr @p, align 4
  store i32 1, ptr @o, align 4
  store i32 1, ptr @n, align 4
  store i32 1, ptr @m, align 4
  store i32 1, ptr @l, align 4
  store i32 1, ptr @k, align 4
  store i32 1, ptr @j, align 4
  store i32 1, ptr @i, align 4
  store i32 1, ptr @h, align 4
  store i32 1, ptr @g, align 4
  store i32 1, ptr @f, align 4
  store i32 1, ptr @e, align 4
  store i32 1, ptr @d, align 4
  store i32 1, ptr @c, align 4
  store i32 1, ptr @b, align 4
  store i32 1, ptr @a, align 4
  tail call void @foo(ptr noundef nonnull @a, ptr noundef nonnull @b, ptr noundef nonnull @c, ptr noundef nonnull @d, ptr noundef nonnull @e, ptr noundef nonnull @f, ptr noundef nonnull @g, ptr noundef nonnull @h, ptr noundef nonnull @i, ptr noundef nonnull @j, ptr noundef nonnull @k, ptr noundef nonnull @l, ptr noundef nonnull @m, ptr noundef nonnull @n, ptr noundef nonnull @o, ptr noundef nonnull @p, ptr noundef nonnull @q, ptr noundef nonnull @r, ptr noundef nonnull @s, ptr noundef nonnull @t)
  %1 = load i32, ptr @a, align 4
  %2 = load i32, ptr @b, align 4
  %add = add nsw i32 %2, %1
  %3 = load i32, ptr @c, align 4
  %add1 = add nsw i32 %add, %3
  %4 = load i32, ptr @d, align 4
  %add2 = add nsw i32 %add1, %4
  %5 = load i32, ptr @e, align 4
  %add3 = add nsw i32 %add2, %5
  %6 = load i32, ptr @f, align 4
  %add4 = add nsw i32 %add3, %6
  %7 = load i32, ptr @g, align 4
  %add5 = add nsw i32 %add4, %7
  %8 = load i32, ptr @h, align 4
  %add6 = add nsw i32 %add5, %8
  %9 = load i32, ptr @i, align 4
  %add7 = add nsw i32 %add6, %9
  %10 = load i32, ptr @j, align 4
  %add8 = add nsw i32 %add7, %10
  %11 = load i32, ptr @k, align 4
  %add9 = add nsw i32 %add8, %11
  %12 = load i32, ptr @l, align 4
  %add10 = add nsw i32 %add9, %12
  %13 = load i32, ptr @m, align 4
  %add11 = add nsw i32 %add10, %13
  %14 = load i32, ptr @n, align 4
  %add12 = add nsw i32 %add11, %14
  %15 = load i32, ptr @o, align 4
  %add13 = add nsw i32 %add12, %15
  %16 = load i32, ptr @p, align 4
  %add14 = add nsw i32 %add13, %16
  %17 = load i32, ptr @q, align 4
  %add15 = add nsw i32 %add14, %17
  %18 = load i32, ptr @r, align 4
  %add16 = add nsw i32 %add15, %18
  %19 = load i32, ptr @s, align 4
  %add17 = add nsw i32 %add16, %19
  %20 = load i32, ptr @t, align 4
  %add18 = add nsw i32 %add17, %20
  ret i32 %add18
}
